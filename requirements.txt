# 🏠 ESDATA_Epsilon - Dependencias del Pipeline Inmobiliario
# Archivo de requisitos actualizado: Septiembre 2025

# ===============================================================================
# CORE DATA PROCESSING
# ===============================================================================

# Procesamiento de datos estructurados
pandas>=2.1.0               # DataFrames y análisis de datos
numpy>=1.24.0              # Operaciones numéricas y arrays
scipy>=1.11.0              # Estadística científica y distribuciones

# ===============================================================================
# STATISTICAL ANALYSIS & MACHINE LEARNING
# ===============================================================================

# Estadística y análisis matemático
scikit-learn>=1.3.0        # Machine learning y clustering
statsmodels>=0.14.0        # Modelos estadísticos avanzados

# ===============================================================================
# GEOSPATIAL PROCESSING  
# ===============================================================================

# Análisis geoespacial y geometrías
geopandas>=0.14.0          # Análisis geoespacial con pandas
shapely>=2.0.0             # Manipulación de geometrías
fiona>=1.8.22              # I/O para archivos geoespaciales
pyproj>=3.4.0              # Proyecciones cartográficas

# ===============================================================================
# TEXT PROCESSING & NLP
# ===============================================================================

# Procesamiento de lenguaje natural
nltk>=3.8                  # Natural Language Toolkit
textblob>=0.17.1           # Procesamiento simple de texto
regex>=2023.6.3           # Expresiones regulares avanzadas

# ===============================================================================
# VISUALIZATION & PLOTTING
# ===============================================================================

# Visualización de datos (requerido por visualizacion_inmobiliaria.py)
matplotlib>=3.7.0          # Gráficos y visualizaciones básicas
seaborn>=0.12.0           # Visualizaciones estadísticas elegantes

# ===============================================================================
# FILE I/O & DATA FORMATS
# ===============================================================================

# Manejo de diferentes formatos de archivo
openpyxl>=3.1.0           # Lectura/escritura Excel (.xlsx)
xlsxwriter>=3.1.0         # Escritura Excel optimizada

# ===============================================================================
# UTILITIES & SYSTEM
# ===============================================================================

# Utilidades del sistema y progreso
tqdm>=4.65.0              # Barras de progreso elegantes
python-dotenv>=1.0.0      # Manejo de variables de entorno
colorama>=0.4.6           # Colores en terminal

# ===============================================================================
# OPTIONAL ENHANCED FEATURES
# ===============================================================================

# Funcionalidades opcionales (descomenta según necesidad)

# Jupyter & Development
# jupyter>=1.0.0            # Notebooks interactivos
# ipykernel>=6.25.0         # Kernel de Jupyter

# Advanced Visualization  
# plotly>=5.0.0             # Gráficos interactivos
# dash>=2.0.0               # Dashboards web interactivos

# Database & APIs
# sqlalchemy>=2.0.0         # ORM y conectores de base de datos
# psycopg2-binary>=2.9.0    # Conector PostgreSQL (Supabase)
# requests>=2.31.0          # HTTP requests para APIs

# Advanced NLP
# spacy>=3.6.0              # NLP moderno y eficiente
# wordcloud>=1.9.0          # Generación de nubes de palabras

# Performance & Parallel Processing
# joblib>=1.3.0             # Procesamiento paralelo
# numba>=0.57.0             # Compilación JIT para NumPy
# dask>=2023.8.0            # Procesamiento distribuido

# Web Scraping
# beautifulsoup4>=4.12.0    # Web scraping
# selenium>=4.11.0          # Automatización de navegadores

# ===============================================================================
# INSTALLATION GUIDE
# ===============================================================================

# INSTALACIÓN BÁSICA (solo pipeline):
# pip install -r requirements.txt

# INSTALACIÓN PARA DESARROLLO:
# pip install -r requirements.txt
# pip install jupyter ipykernel plotly  # Descomenta dependencias opcionales

# VERIFICACIÓN DE INSTALACIÓN:
# python -c "import pandas, geopandas, numpy, scipy, sklearn; print('✅ Core dependencies OK')"
# python -c "from esdata.utils.paths import verificar_estructura; verificar_estructura()"

# ===============================================================================
# SYSTEM REQUIREMENTS
# ===============================================================================

# Python: >= 3.9 (recomendado 3.11+)
# OS: Windows 10+, macOS 11+, Linux (Ubuntu 20.04+)
# Memory: >= 4GB RAM (recomendado 8GB+ para datasets >25K propiedades)
# Storage: >= 2GB espacio libre para datos temporales y outputs

# ===============================================================================
# SYSTEM DEPENDENCIES
# ===============================================================================

# Windows:
# - Microsoft Visual C++ Redistributable 14.0+
# - (Opcional) Microsoft Visual Studio Build Tools

# macOS:
# - Xcode command line tools: xcode-select --install

# Linux (Ubuntu/Debian):
# - sudo apt-get update
# - sudo apt-get install build-essential python3-dev
# - sudo apt-get install gdal-bin libgdal-dev libspatialindex-dev

# ===============================================================================
# TROUBLESHOOTING
# ===============================================================================

# 🚨 ERROR: Microsoft Visual C++ required (Windows)
# SOLUCIÓN: https://visualstudio.microsoft.com/visual-cpp-build-tools/

# 🚨 ERROR: GDAL/GEOS not found  
# SOLUCIÓN Windows: conda install geopandas -c conda-forge
# SOLUCIÓN Linux: sudo apt-get install gdal-bin libgdal-dev
# SOLUCIÓN macOS: brew install gdal geos

# 🚨 ERROR: Memory issues con datasets grandes (>25K propiedades)
# SOLUCIÓN: 
# - Aumentar memoria virtual (8GB+)
# - Usar chunk processing: pd.read_csv(chunksize=5000)
# - Considerar formato Parquet: df.to_parquet()

# 🚨 ERROR: SSL Certificate verification failed
# SOLUCIÓN: pip install --trusted-host pypi.org --trusted-host pypi.python.org

# ===============================================================================
# PERFORMANCE OPTIMIZATIONS
# ===============================================================================

# Para datasets grandes (>50K propiedades):
# 1. Usar formato Parquet en lugar de CSV
# 2. Implementar chunk processing en pandas
# 3. Usar multiprocessing en análisis estadísticos
# 4. Considerar Dask para procesamiento distribuido

# Para análisis geoespacial intensivo:
# 1. Usar índices espaciales (STRtree) en geopandas
# 2. Simplificar geometrías: geometry.simplify(tolerance=0.001)
# 3. Reproyectar a coordenadas UTM para cálculos de distancia
# 4. Usar spatial joins optimizados con predicate='intersects'

# ===============================================================================
# MODULE-SPECIFIC REQUIREMENTS
# ===============================================================================

# Dashboard Web (esdata/dashboard/):
# - streamlit>=1.25.0
# - plotly>=5.0.0
# - pydeck>=0.8.0

# Supabase Integration (Supabase/):
# - psycopg2-binary>=2.9.0
# - sqlalchemy>=2.0.0

# Advanced Analytics (future):
# - xgboost>=1.7.0
# - lightgbm>=4.0.0
# - tensorflow>=2.13.0

# ===============================================================================
# VERSION COMPATIBILITY MATRIX
# ===============================================================================

# Python 3.9:  ✅ Totalmente compatible
# Python 3.10: ✅ Recomendado
# Python 3.11: ✅ Mejor rendimiento
# Python 3.12: ⚠️  Algunas dependencias pueden no estar disponibles

# Windows:     ✅ Totalmente soportado
# macOS:       ✅ Intel y Apple Silicon
# Linux:       ✅ Ubuntu 20.04+, CentOS 8+

# ===============================================================================
# CHANGELOG
# ===============================================================================

# v1.0.0 (Sep 2025): 
# - Pipeline completo Steps 1-8
# - Procesamiento geoespacial robusto
# - Análisis estadístico comprehensivo
# - Manejo de precios USD/MN
# - Logging detallado con emojis

# v1.1.0 (Planned):
# - NLP avanzado para análisis de amenidades
# - Machine learning para predicciones de precios
# - API integration para fuentes externas
# - Dashboard interactivo mejorado

# ===============================================================================
# BEST PRACTICES
# ===============================================================================

# 1. VIRTUAL ENVIRONMENTS:
#    python -m venv venv
#    source venv/bin/activate  # Linux/macOS
#    venv\Scripts\activate     # Windows

# 2. FREEZE VERSIONS FOR PRODUCTION:
#    pip freeze > requirements-frozen.txt

# 3. REGULAR UPDATES:
#    pip list --outdated
#    pip install --upgrade package_name

# 4. SECURITY SCANNING:
#    pip install safety
#    safety check

# ===============================================================================

# 📊 RESUMEN DE FUNCIONALIDADES CUBIERTAS:
# ✅ Procesamiento de datos estructurados (pandas, numpy)
# ✅ Análisis geoespacial completo (geopandas, shapely)
# ✅ Estadística descriptiva e inferencial (scipy, statsmodels)
# ✅ Machine learning básico (scikit-learn)
# ✅ Procesamiento de texto (nltk, regex)
# ✅ Visualización de datos (matplotlib, seaborn)
# ✅ I/O de archivos múltiples formatos (openpyxl)
# ✅ Utilidades de desarrollo (tqdm, colorama)

# 🚀 ¡Listo para procesar datos inmobiliarios con ESDATA_Epsilon!

# 📧 Soporte: Si tienes problemas de instalación, verifica:
# 1. Versión de Python (python --version)
# 2. Dependencias del sistema instaladas
# 3. Permisos de escritura en directorio de instalación
# 4. Conexión a internet para descargas de PyPI