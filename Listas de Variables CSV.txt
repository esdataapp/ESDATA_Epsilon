Primero hay que limpiar el csv, contiene simbolos raros y errores en vocales minusculas con acento, vocales mayusculas con acento y "Ñ", "ñ", y otros caracteres.

[
    {
        "nombre_variable": "id",
        "columna_csv": 0,
        "formato_entrada": "Entero, e.g., '1', '2'",
        "formato_salida": "Entero o string, e.g., 1, 2",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Hay que crear un id para ubicar rapidamente de que csv proviene la propiedad, y que contenga informacion de la propeidad para los duplicados".
        ],
        "manejo_errores": "Si no es convertible o nulo, asignar None o 0 dependiendo del contexto (e.g., IDs no pueden ser 0 si es primario).",
        "validaciones": "Valor > 0, único en el dataset."
    },
    {
        "nombre_variable": "PaginaWeb",
        "columna_csv": 1,
        "formato_entrada": "Texto, e.g., 'Inm24'",
        "formato_salida": "String, e.g., 'Inm24'",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip de espacios en blanco.",
            "Convertir a mayúsculas o minúsculas para estandarizar si es necesario (e.g., 'inm24' -> 'Inm24')."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Longitud razonable (e.g., < 50 caracteres), valores esperados como 'Inm24', 'CyT', 'Lam'."
    },
    {
        "nombre_variable": "Ciudad",
        "columna_csv": 2,
        "formato_entrada": "Texto, e.g., 'Gdl'",
        "formato_salida": "String, e.g., 'Gdl'",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip de espacios.",
            "Estandarizar abreviaturas (e.g., 'Guadalajara' -> 'Gdl' si es consistente)."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valores esperados como 'Zap', 'Gdl', 'Tlaq'."
    },
    {
        "nombre_variable": "Fecha Scrap",
        "columna_csv": 3,
        "formato_entrada": "String como '01/05/2025' o número Excel como '45748'",
        "formato_salida": "Fecha como string '01/05/2025' o datetime object",
        "tipo_dato": "datetime.datetime o str",
        "reglas_transformacion": [
            "Si es número (serial Excel), convertir usando datetime.date(1900, 1, 1) + timedelta(days=valor - 2).",
            "Si es string 'DD/MM/YYYY', parsear con datetime.strptime(valor, '%d/%m/%Y').",
            "Output como 'DD/MM/YYYY'."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Fecha válida, no futura más allá de hoy (2025-09-07)."
    },
    {
        "nombre_variable": "tipo_propiedad",
        "columna_csv": 4,
        "formato_entrada": "Texto, e.g., 'Departamento'",
        "formato_salida": "String, e.g., 'Dep'",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip espacios.",
            "Abreviar si es necesario (e.g., 'Departamento' -> 'Dep', 'Casa' -> 'Cas')."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valores esperados como 'Cas', 'Dep', 'Ofc'."
    },
    {
        "nombre_variable": "area_m2",
        "columna_csv": 5,
        "formato_entrada": "Texto con números y símbolos, e.g., '350m²', '73m²'",
        "formato_salida": "Float redondeado a 2 decimales, e.g., 350.00",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Eliminar símbolos no numéricos como 'm²', espacios (usar regex r'[^\d.]').",
            "Convertir a float.",
            "Redondear con round(valor, 2)."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor > 0."
    },
    {
        "nombre_variable": "recamaras",
        "columna_csv": 6,
        "formato_entrada": "Entero, e.g., '3', '2'",
        "formato_salida": "Entero, e.g., 3, 2",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Convertir a int si es string."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor >= 0."
    },
    {
        "nombre_variable": "estacionamientos",
        "columna_csv": 7,
        "formato_entrada": "Entero, e.g., '2', '1'",
        "formato_salida": "Entero, e.g., 2, 1",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Convertir a int."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor >= 0."
    },
    {
        "nombre_variable": "operacion",
        "columna_csv": 8,
        "formato_entrada": "Texto, e.g., 'venta'",
        "formato_salida": "String, e.g., 'Ven'",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Abreviar (e.g., 'venta' -> 'Ven', 'renta' -> 'Ren')."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valores como 'Ven', 'Ren', 'Ven-d'."
    },
    {
        "nombre_variable": "precio",
        "columna_csv": 9,
        "formato_entrada": "Texto con números, e.g., 'ventaMN 19,000,000', 'ventaMN 2,982,492'",
        "formato_salida": "Float redondeado a 2 decimales, e.g., 19000000.00",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Extraer números después de 'MN ' o similar (usar regex para capturar dígitos y comas).",
            "Eliminar comas como separadores de miles.",
            "Convertir a float, redondear a 2 decimales."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
		"Redondear con round(valor, 2)."
        "validaciones": "Valor > 0."
    },
    {
        "nombre_variable": "mantenimiento",
        "columna_csv": 10,
        "formato_entrada": "Texto con números, e.g., 'Mantenimiento MN 1,950', o vacío",
        "formato_salida": "Float redondeado a 2 decimales, e.g., 1950.00",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Extraer números después de 'MN ' (regex similar al precio).",
            "Eliminar comas, convertir a float, redondear."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
		"Redondear con round(valor, 2)."
        "validaciones": "Valor >= 0."
    },
    {
        "nombre_variable": "direccion",
        "columna_csv": 11,
        "formato_entrada": "Texto, e.g., 'Mar Mediterraneo 1103,  Country Club, Guadalajara'",
        "formato_salida": "String limpia",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip espacios extras, normalizar comas."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Longitud > 5 caracteres."
    },
    {
        "nombre_variable": "ubicacion_url",
        "columna_csv": 12,
        "formato_entrada": "URL completa, e.g., 'https://maps.google.com/...center=20.698897000000000,-103.373056600000000&...'",
        "formato_salida": "String de coordenadas, e.g., 'center=20.698897000000000,-103.373056600000000'",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Extraer parámetro 'center=' usando string split o regex (r'center=([\d.-]+,[\d.-]+)')."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Formato lat,long válido."
    },
    {
        "nombre_variable": "titulo",
        "columna_csv": 13,
        "formato_entrada": "Texto, e.g., 'Departamento PH en Venta en El Country Club \"Torre Galatea\"'",
        "formato_salida": "String limpia",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip espacios, eliminar comillas extras si necesario."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Ninguna específica."
    },
    {
        "nombre_variable": "descripcion",
        "columna_csv": 14,
        "formato_entrada": "Texto largo, e.g., 'PH en venta en el Country Club...'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip líneas nuevas y espacios extras.",
            "Corregir encodings (e.g., .encode('latin1').decode('utf-8'))."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Longitud > 0."
    },
    {
        "nombre_variable": "anunciante",
        "columna_csv": 15,
        "formato_entrada": "Texto con números/symbolos, e.g., 'SILDUR Agencia Inmobiliaria'",
        "formato_salida": "String limpia",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip espacios, eliminar prefijos como '.inmobiliaria' si aplica."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Ninguna."
    },
    {
        "nombre_variable": "codigo_anunciante",
        "columna_csv": 16,
        "formato_entrada": "Texto con números, e.g., 'EB-NE2578'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip espacios."
        ],
        "manejo_errores": "Si nulo, asignar None.",
        "validaciones": "Formato alfanumérico."
    },
    {
        "nombre_variable": "codigo_inmuebles24",
        "columna_csv": 17,
        "formato_entrada": "Enteros como string, e.g., '91159456'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Mantener como string para evitar pérdida de ceros."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Longitud típica de código."
    },
    {
        "nombre_variable": "tiempo_publicacion",
        "columna_csv": 18,
        "formato_entrada": "Texto con números, e.g., 'Publicado hace más de 1 año', 'Publicado hace 61 días'",
        "formato_salida": "Entero de días, e.g., >365, 61",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Parsear texto: 'hace X días' -> X, 'desde ayer' -> 1, 'Hoy' -> 0 o 1, 'más de un año' -> 366.",
            "Usar regex para extraer números y unidades (días, año).",
            "Si 'más de un año', asignar 366; si 'hace X días', int(X)."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor >= 0."
    },
    {
        "nombre_variable": "area_total",
        "columna_csv": 19,
        "formato_entrada": "Texto con símbolos, e.g., '73 m² tot.', vacío",
        "formato_salida": "Float redondeado a 2 decimales, e.g., 73.00",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Eliminar 'm² tot.', espacios, etc. (regex r'[\d.]+').",
            "Convertir a float, redondear."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor > 0."
    },
    {
        "nombre_variable": "area_cubierta",
        "columna_csv": 20,
        "formato_entrada": "Texto con símbolos, e.g., '350 m² cub.'",
        "formato_salida": "Float redondeado a 2 decimales, e.g., 350.00",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Similar a area_total: extraer número."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor <= area_total si aplica."
    },
    {
        "nombre_variable": "banos_icon",
        "columna_csv": 21,
        "formato_entrada": "Texto con números, e.g., '4 baños', '2 baños'",
        "formato_salida": "Float redondeado a 1 decimal, e.g., 4.0, 2.0",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Extraer número antes de 'baños' (regex r'(\d+) ba').",
            "Convertir a float, redondear a 1."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor >= 0."
    },
    {
        "nombre_variable": "estacionamientos_icon",
        "columna_csv": 22,
        "formato_entrada": "Texto con números, e.g., '2 estac.', '1 estac.'",
        "formato_salida": "Entero, e.g., 2, 1",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Extraer número (regex r'(\d+) estac').",
            "Convertir a int."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Consistente con 'estacionamientos'."
    },
    {
        "nombre_variable": "recamaras_icon",
        "columna_csv": 23,
        "formato_entrada": "Texto con números, e.g., '3 rec.', '2 rec.'",
        "formato_salida": "Entero, e.g., 3, 2",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Extraer número (regex r'(\d+) rec')."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Consistente con 'recamaras'."
    },
    {
        "nombre_variable": "medio_banos_icon",
        "columna_csv": 24,
        "formato_entrada": "Texto con números, e.g., '1 medio baño', vacío",
        "formato_salida": "Entero, e.g., 1, 0",
        "tipo_dato": "int",
        "reglas_transformacion": [
            "Extraer número (regex r'(\d+) medio')."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Valor >= 0."
    },
    {
        "nombre_variable": "antiguedad_icon",
        "columna_csv": 25,
        "formato_entrada": "Texto/números/estados, e.g., 'A estrenar', '1 años', '5 años', 'en construcción'",
        "formato_salida": "Entero o string, e.g., 0 para 'A estrenar', 1 para '1 años', 'en construcción'",
        "tipo_dato": "int o str",
        "reglas_transformacion": [
            "Si numérico 'X años' -> int(X).",
            "Si 'A estrenar' -> 0.",
            "Mantener strings como 'en construcción', 'preventa'."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Si int, >= 0."
    },
    {
        "nombre_variable": "Características generales",
        "columna_csv": 26,
        "formato_entrada": "Texto, e.g., 'Amueblado; Elevador; Alberca; ...'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Strip y normalizar separadores (e.g., ';' -> ', ').",
            "Corregir encodings."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Ninguna."
    },
    {
        "nombre_variable": "Servicios",
        "columna_csv": 27,
        "formato_entrada": "Texto, e.g., 'Gimnasio; Aire acondicionado; ...'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Similar a características: normalizar."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Ninguna."
    },
    {
        "nombre_variable": "Amenidades",
        "columna_csv": 28,
        "formato_entrada": "Texto, e.g., 'Area de eventos'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Normalizar."
        ],
        "manejo_errores": "Asignar ''.",
        "validaciones": "Ninguna."
    },
    {
        "nombre_variable": "Exteriores",
        "columna_csv": 29,
        "formato_entrada": "Texto, e.g., 'Balcón(es); Jardín Privado'",
        "formato_salida": "String",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Normalizar y corregir encodings."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Ninguna."
    },
    {
        "nombre_variable": "longitud",
        "columna_csv": 30,
        "formato_entrada": "Float extraído de ubicacion_url, e.g., '-103.373057'",
        "formato_salida": "Float con 6 decimales, e.g., -103.373057",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Extraer de ubicacion_url usando regex r'center=([+-]?\\d+\\.?\\d*),([+-]?\\d+\\.?\\d*)'.",
            "Tomar el segundo grupo (longitud).",
            "Convertir a float y redondear a 6 decimales."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
		"Redondear con round(valor, 6)."
        "validaciones": "Rango típico para México: -118 a -86 (longitud oeste)."
    },
    {
        "nombre_variable": "latitud",
        "columna_csv": 31,
        "formato_entrada": "Float extraído de ubicacion_url, e.g., '20.698897'",
        "formato_salida": "Float con 6 decimales, e.g., 20.698897",
        "tipo_dato": "float",
        "reglas_transformacion": [
            "Extraer de ubicacion_url usando regex r'center=([+-]?\\d+\\.?\\d*),([+-]?\\d+\\.?\\d*)'.",
            "Tomar el primer grupo (latitud).",
            "Convertir a float y redondear a 6 decimales."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
        "validaciones": "Rango típico para México: 14 a 33 (latitud norte)."
    },
    {
        "nombre_variable": "Colonia",
        "columna_csv": 32,
        "formato_entrada": "String asignada por intersección geoespacial, e.g., 'Country Club'",
        "formato_salida": "String, e.g., 'Country Club'",
        "tipo_dato": "str",
        "reglas_transformacion": [
            "Asignada automáticamente por el sistema de geolocalización.",
            "Strip espacios y normalizar formato.",
            "Verificar que la colonia existe en los polígonos de referencia."
        ],
        "manejo_errores": "Si es vacio o nulo 'Desconocido'.",
		"Redondear con round(valor, 6)."
        "validaciones": "Debe corresponder a colonias válidas de la ciudad especificada."
    }
]






============================================================
SECCION: VARIABLES DERIVADAS NIVEL PROPIEDAD (Listado Final)
============================================================
Nota: Estas variables pueden aparecer en los CSV finales consolidados (ej. 0.Final_Num_*.csv) luego del pretratamiento y enriquecimiento.

[
    {
        "nombre_variable": "pxm2",
        "tipo_dato": "float",
        "descripcion": "Precio por metro cuadrado. Indicador base de comparación entre propiedades.",
        "formula": "precio / area_m2",
        "dependencias": ["precio", "area_m2"],
        "validaciones": "area_m2 > 0 y precio > 0; descartar si produce valores extremos irreales (por reglas de outliers)."
    },
    {
        "nombre_variable": "precio_log",
        "tipo_dato": "float",
        "descripcion": "Logaritmo natural del precio para estabilizar varianza en análisis estadístico.",
        "formula": "ln(precio)",
        "dependencias": ["precio"],
        "validaciones": "precio > 0"
    },
    {
        "nombre_variable": "pxm2_log",
        "tipo_dato": "float",
        "descripcion": "Logaritmo natural de pxm2 para tests de normalidad y modelado.",
        "formula": "ln(pxm2)",
        "dependencias": ["pxm2"],
        "validaciones": "pxm2 > 0"
    },
    {
        "nombre_variable": "estrato_area",
        "tipo_dato": "str",
        "descripcion": "Estratificación discreta de área en bins definidos (ej. '0-60', '60-90', '90-120', '>120').",
        "origen": "Función de discretización parametrizada por cuantiles o cortes de negocio.",
        "dependencias": ["area_m2"],
        "validaciones": "Valor dentro del catálogo de cortes configurados."
    },
    {
        "nombre_variable": "estrato_pxm2",
        "tipo_dato": "str",
        "descripcion": "Clasificación del pxm2 (ej. 'Bajo', 'Medio', 'Alto', 'Premium') según cuantiles o reglas de negocio.",
        "dependencias": ["pxm2"],
        "validaciones": "Debe pertenecer al diccionario de etiquetas vigente."
    },
    {
        "nombre_variable": "flag_outlier_precio",
        "tipo_dato": "int (0/1)",
        "descripcion": "Marca si el precio fue identificado como outlier (IQR o Z-Score).",
        "dependencias": ["precio"],
        "validaciones": "0 o 1"
    },
    {
        "nombre_variable": "flag_outlier_pxm2",
        "tipo_dato": "int (0/1)",
        "descripcion": "Marca si el pxm2 de la propiedad es un outlier comparado con su colonia / ciudad.",
        "dependencias": ["pxm2"],
        "validaciones": "0 o 1"
    },
    {
        "nombre_variable": "metodo_outlier_precio",
        "tipo_dato": "str",
        "descripcion": "Método que detonó la clasificación de outlier (IQR, ZSCORE, BOTH, NONE).",
        "dependencias": ["flag_outlier_precio"],
        "validaciones": "Valores controlados: IQR | ZSCORE | BOTH | NONE"
    },
    {
        "nombre_variable": "metodo_outlier_pxm2",
        "tipo_dato": "str",
        "descripcion": "Método que detonó la clasificación de outlier para pxm2.",
        "dependencias": ["flag_outlier_pxm2"],
        "validaciones": "Valores controlados: IQR | ZSCORE | BOTH | NONE"
    },
    {
        "nombre_variable": "confidence_score_colonia",
        "tipo_dato": "float",
        "descripcion": "Puntaje de confiabilidad de la colonia para análisis (n, dispersión, sesgo).",
        "rango_esperado": "0 a 1",
        "dependencias": ["n_colonia", "skew_pxm2_colonia", "iqr_pxm2_colonia"],
        "validaciones": "0 <= valor <= 1"
    },
    {
        "nombre_variable": "periodo",
        "tipo_dato": "str",
        "descripcion": "Etiqueta temporal del corte del dataset (ej. 'Sep25').",
        "validaciones": "Formato abreviado AAAmm o etiqueta consistente con esquema interno."
    }
]

============================================================
SECCION: VARIABLES ESTADISTICAS NIVEL COLONIA (Tablas de Resumen)
============================================================
Nota: Presentes en tablas de salida agregadas (ej. resumen_colonia_inicial / final, vistas o CSV intermedios de estadística).

[
    {"nombre_variable": "colonia", "tipo_dato": "str", "descripcion": "Nombre de la colonia (clave de agregación)."},
    {"nombre_variable": "ciudad", "tipo_dato": "str", "descripcion": "Ciudad asociada a la colonia."},
    {"nombre_variable": "n_colonia", "tipo_dato": "int", "descripcion": "Número de propiedades válidas en la colonia tras filtros."},
    {"nombre_variable": "pxm2_mediana", "tipo_dato": "float", "descripcion": "Mediana de pxm2 en la colonia."},
    {"nombre_variable": "pxm2_promedio", "tipo_dato": "float", "descripcion": "Media de pxm2 en la colonia."},
    {"nombre_variable": "pxm2_std", "tipo_dato": "float", "descripcion": "Desviación estándar de pxm2."},
    {"nombre_variable": "pxm2_iqr", "tipo_dato": "float", "descripcion": "Rango intercuartílico (Q3 - Q1) de pxm2."},
    {"nombre_variable": "pxm2_min", "tipo_dato": "float", "descripcion": "Valor mínimo pxm2 sin outliers severos (post-tratamiento)."},
    {"nombre_variable": "pxm2_max", "tipo_dato": "float", "descripcion": "Valor máximo pxm2 sin outliers severos (post-tratamiento)."},
    {"nombre_variable": "pxm2_q05", "tipo_dato": "float", "descripcion": "Cuantil 5% pxm2."},
    {"nombre_variable": "pxm2_q10", "tipo_dato": "float", "descripcion": "Cuantil 10% pxm2."},
    {"nombre_variable": "pxm2_q25", "tipo_dato": "float", "descripcion": "Cuantil 25% pxm2 (Q1)."},
    {"nombre_variable": "pxm2_q50", "tipo_dato": "float", "descripcion": "Mediana pxm2 (Q2)."},
    {"nombre_variable": "pxm2_q75", "tipo_dato": "float", "descripcion": "Cuantil 75% pxm2 (Q3)."},
    {"nombre_variable": "pxm2_q90", "tipo_dato": "float", "descripcion": "Cuantil 90% pxm2."},
    {"nombre_variable": "pxm2_q95", "tipo_dato": "float", "descripcion": "Cuantil 95% pxm2."},
    {"nombre_variable": "skew_pxm2", "tipo_dato": "float", "descripcion": "Coeficiente de asimetría (sesgo) de pxm2."},
    {"nombre_variable": "cv_pxm2", "tipo_dato": "float", "descripcion": "Coeficiente de variación (std/mean) de pxm2."},
    {"nombre_variable": "n_outliers_pxm2", "tipo_dato": "int", "descripcion": "Conteo de registros marcados como outlier pxm2 en la colonia."},
    {"nombre_variable": "ratio_outliers_pxm2", "tipo_dato": "float", "descripcion": "n_outliers_pxm2 / n_colonia."}
]

============================================================
SECCION: AMENIDADES (Wide y Métricas Derivadas)
============================================================
Las columnas binarias amen_* indican presencia (1) / ausencia (0) de la amenidad normalizada.

[
    {"nombre_variable": "amen_alberca", "tipo_dato": "int (0/1)", "descripcion": "Indicador de presencia de Alberca."},
    {"nombre_variable": "amen_elevador", "tipo_dato": "int (0/1)", "descripcion": "Indicador de presencia de Elevador."},
    {"nombre_variable": "amen_gimnasio", "tipo_dato": "int (0/1)", "descripcion": "Indicador de presencia de Gimnasio."},
    {"nombre_variable": "amen_seguridad", "tipo_dato": "int (0/1)", "descripcion": "Indicador de vigilancia/seguridad."},
    {"nombre_variable": "amen_balcón", "tipo_dato": "int (0/1)", "descripcion": "Indicador de balcón/terraza."},
    {"nombre_variable": "amen_patio", "tipo_dato": "int (0/1)", "descripcion": "Indicador de patio/jardín privado."},
    {"nombre_variable": "amenidad_presente_count", "tipo_dato": "int", "descripcion": "Número de amenidades presentes por propiedad (suma de amen_*)."},
    {"nombre_variable": "amenidad_catalogo_total", "tipo_dato": "int", "descripcion": "Total de amenidades definidas en el catálogo interno."},
    {"nombre_variable": "ratio_amenidades_presentes", "tipo_dato": "float", "descripcion": "amenidad_presente_count / amenidad_catalogo_total."},
    {"nombre_variable": "lift_amen_<amenidad>", "tipo_dato": "float", "descripcion": "(Mediana pxm2 con amenidad / Mediana pxm2 sin amenidad). Valor >1 indica prima de precio."},
    {"nombre_variable": "diff_mediana_pxm2_amen_<amenidad>", "tipo_dato": "float", "descripcion": "Mediana(px m2 con amenidad) - Mediana(px m2 sin amenidad)."},
    {"nombre_variable": "ratio_presencia_amen_<amenidad>", "tipo_dato": "float", "descripcion": "Proporción de propiedades con la amenidad en la muestra analizada."}
]

============================================================
SECCION: MARKETING / TEXTO
============================================================
[
    {"nombre_variable": "len_descripcion", "tipo_dato": "int", "descripcion": "Longitud de la descripción en caracteres normalizados."},
    {"nombre_variable": "num_palabras_descripcion", "tipo_dato": "int", "descripcion": "Conteo de palabras tokenizadas limpias."},
    {"nombre_variable": "densidad_palabras_clave", "tipo_dato": "float", "descripcion": "Proporción de tokens que pertenecen al set de palabras clave inmobiliarias."},
    {"nombre_variable": "top_terms_tfidf", "tipo_dato": "str", "descripcion": "Lista (serializada) de términos TF-IDF principales."}
]

============================================================
SECCION: OUTLIERS / NORMALIDAD (Tablas Auditoría)
============================================================
[
    {"nombre_variable": "variable", "tipo_dato": "str", "descripcion": "Nombre de la variable evaluada (precio, pxm2, area_m2)."},
    {"nombre_variable": "q1", "tipo_dato": "float", "descripcion": "Primer cuartil usado en cálculo IQR."},
    {"nombre_variable": "q3", "tipo_dato": "float", "descripcion": "Tercer cuartil usado en cálculo IQR."},
    {"nombre_variable": "iqr", "tipo_dato": "float", "descripcion": "Inter-Quartile Range (q3 - q1)."},
    {"nombre_variable": "lower_bound", "tipo_dato": "float", "descripcion": "Límite inferior para detección de outliers (q1 - 1.5*IQR)."},
    {"nombre_variable": "upper_bound", "tipo_dato": "float", "descripcion": "Límite superior para detección de outliers (q3 + 1.5*IQR)."},
    {"nombre_variable": "n_outliers", "tipo_dato": "int", "descripcion": "Cantidad de registros fuera de los límites."},
    {"nombre_variable": "pvalue_shapiro", "tipo_dato": "float", "descripcion": "P-valor del test de Shapiro-Wilk sobre variable (muestra)."},
    {"nombre_variable": "stat_shapiro", "tipo_dato": "float", "descripcion": "Estadístico del test de Shapiro-Wilk."},
    {"nombre_variable": "resultado_normalidad", "tipo_dato": "str", "descripcion": "Interpretación (NO_NORMAL, APROX_NORMAL) según umbral p-valor."}
]

============================================================
SECCION: REPRESENTATIVIDAD
============================================================
[
    {"nombre_variable": "metodo_representatividad", "tipo_dato": "str", "descripcion": "Método aplicado (EJ: 'N_SIZE', 'IQR_STABILITY', 'SKEW_FILTER')."},
    {"nombre_variable": "flag_representativo_colonia", "tipo_dato": "int (0/1)", "descripcion": "Marca si la colonia pasa criterios mínimos para comparaciones de pxm2."},
    {"nombre_variable": "criterio_minimo_n", "tipo_dato": "int", "descripcion": "Umbral mínimo de n aplicado (ej. 5/10/30)."}
]

============================================================
SECCION: GEOESPACIAL / FORMATO
============================================================
[
    {"nombre_variable": "geom", "tipo_dato": "geometry(Point,4326)", "descripcion": "Geometría espacial generada a partir de latitud/longitud."},
    {"nombre_variable": "slug_colonia", "tipo_dato": "str", "descripcion": "Nombre de colonia normalizado en minúsculas y guiones para joins limpios."}
]

============================================================
NOTAS GENERALES
============================================================
- No todas las columnas aparecerán en todos los CSV. Este catálogo es superset para despliegue en Supabase.
- Prefijos sugeridos: amen_ (amenidades), pxm2_ (estadísticos), flag_ (indicadores), diff_ (diferencias), ratio_ (proporciones), lift_ (relaciones relativas), estrato_ (bins discretos), slug_ (normalización textual), geom (geoespacial).
- Cualquier nueva variable debe documentarse siguiendo este formato antes de exponerse a consumidores externos.






