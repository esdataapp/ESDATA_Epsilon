🚀 Características Principales
1. Diseño Ultra Moderno

Glassmorphism y Efectos Visuales: Fondos con blur, transparencias y gradientes dinámicos
Animaciones Suaves: Transiciones fluidas en hover y cambios de estado
Tema Oscuro Profesional: Optimizado para largas sesiones de análisis

2. Visualizaciones Avanzadas

KPI Cards Interactivas: Con gradientes y efectos de hover
Gráficas de Barras: Con gradientes y tooltips personalizados
Scatter Plots: Para correlación precio vs área
Gráficas Compuestas: Combinando barras, líneas y áreas
Pie Charts: Con diseño donut moderno
Radar Charts: Para análisis multivariable
Treemaps: Para distribución por zonas
Box Plots: Para análisis de distribución de precios

3. Sistema de Filtros Dinámicos

Panel Lateral Deslizable: Con todos los filtros disponibles
Filtros por:

Ciudad (Guadalajara, Zapopan, Tlaquepaque, Tonalá)
Tipo de Propiedad (Casa, Departamento, Terreno, Oficina)
Operación (Venta/Renta)
Rango de Precios (con sliders interactivos)
Rango de Área (m²)



4. Secciones del Dashboard
Overview

KPIs principales (Propiedades totales, Precio promedio, Precio/m², Colonias activas)
Distribución de precios por colonia
Correlación precio vs área
Análisis de precio por metro cuadrado
Distribución por tipo de propiedad y zona

Análisis por Colonia

Tabla interactiva con métricas clave
Indicadores de tendencia
Box plots de distribución de precios
Exportación de datos

Analytics (Expandible)

Análisis estadístico avanzado
Modelos predictivos
Clustering de colonias

Reports (Expandible)

Generación de reportes personalizados
Exportación en múltiples formatos

📊 Tipos de Gráficas Incluidas

Bar Charts - Distribución de precios
Scatter Plots - Correlaciones
Line Charts - Tendencias temporales
Area Charts - Evolución acumulativa
Composed Charts - Análisis múltiple
Pie/Donut Charts - Distribuciones porcentuales
Radar Charts - Análisis multidimensional
Treemaps - Jerarquías y proporciones
Box Plots - Análisis de distribución estadística

//////////////////////////////////////////////////////

Crear endpoints en tu API NestJS:

typescript// Ejemplo de endpoints necesarios
GET /api/properties/stats
GET /api/colonias/analysis
GET /api/properties/filter
POST /api/reports/generate

Conectar el frontend con los datos reales:

typescript// Reemplazar sampleData con llamadas a tu API
const fetchData = async () => {
  const response = await fetch('http://tu-backend/api/properties/stats');
  const data = await response.json();
  return data;
};
🎨 Personalización Adicional
El dashboard está diseñado para ser altamente personalizable:

Colores: Todos los gradientes y paletas están centralizados en el objeto COLORS
Responsivo: Se adapta a diferentes tamaños de pantalla
Modular: Cada sección es un componente independiente
Escalable: Fácil de agregar nuevas visualizaciones

📦 Próximos Pasos

Instalar las dependencias en tu proyecto React:

bashnpm install recharts lucide-react d3

Conectar con tu backend para datos reales
Agregar más análisis estadísticos (regresión, clustering, predicciones)
Implementar exportación de datos (CSV, PDF, Excel)
Agregar mapas interactivos con las ubicaciones de propiedades

////////////////////////////////////////////////////////////////


import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { 
  BarChart, Bar, LineChart, Line, ScatterChart, Scatter,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,
  PieChart, Pie, Cell, RadarChart, Radar, PolarGrid, PolarAngleAxis,
  PolarRadiusAxis, Area, AreaChart, Treemap, ComposedChart,
  Sankey, Funnel, FunnelChart, LabelList
} from 'recharts';
import { 
  Home, TrendingUp, MapPin, Building2, DollarSign, 
  BarChart3, Filter, Download, Settings, Search,
  Layers, Activity, Globe, Zap, Database, Eye,
  ChevronDown, ChevronRight, Calendar, Users,
  Package, Briefcase, Target, Award, AlertCircle
} from 'lucide-react';
import * as d3 from 'd3';

// Tipos de datos
interface Property {
  id: string;
  Ciudad: string;
  Colonia: string;
  tipo_propiedad: string;
  operacion: string;
  precio: number;
  area_m2: number;
  PxM2: number;
  recamaras: number;
  banos: number;
  estacionamientos: number;
  antiguedad: number;
  amenidades?: string[];
  servicios?: string[];
  latitud: number;
  longitud: number;
  fecha: string;
}

interface ColoniaStats {
  colonia: string;
  total: number;
  precioPromedio: number;
  precioMediana: number;
  pxm2Promedio: number;
  pxm2Mediana: number;
  areaPromedio: number;
  desviacionPrecio: number;
  rangoPrecios: { min: number; max: number };
  tendencia: number;
}

// Componente principal del Dashboard
const ESDATADashboard: React.FC = () => {
  const [activeSection, setActiveSection] = useState('overview');
  const [selectedCity, setSelectedCity] = useState('all');
  const [selectedColonia, setSelectedColonia] = useState('all');
  const [selectedPropertyType, setSelectedPropertyType] = useState('all');
  const [selectedOperation, setSelectedOperation] = useState('all');
  const [priceRange, setPriceRange] = useState([0, 50000000]);
  const [areaRange, setAreaRange] = useState([0, 1000]);
  const [dateRange, setDateRange] = useState(['2024-01', '2025-09']);
  const [viewMode, setViewMode] = useState('grid');
  const [theme, setTheme] = useState('dark');

  // Datos de ejemplo (en producción vendrían de tu backend)
  const sampleData = {
    properties: [
      {
        id: '1',
        Ciudad: 'Gdl',
        Colonia: 'Providencia',
        tipo_propiedad: 'Dep',
        operacion: 'Ven',
        precio: 8500000,
        area_m2: 180,
        PxM2: 47222,
        recamaras: 3,
        banos: 2.5,
        estacionamientos: 2,
        antiguedad: 5,
        latitud: 20.6789,
        longitud: -103.3890,
        fecha: '2025-09'
      },
      {
        id: '2',
        Ciudad: 'Zap',
        Colonia: 'Puerta de Hierro',
        tipo_propiedad: 'Cas',
        operacion: 'Ven',
        precio: 25000000,
        area_m2: 450,
        PxM2: 55555,
        recamaras: 4,
        banos: 4.5,
        estacionamientos: 4,
        antiguedad: 2,
        latitud: 20.7134,
        longitud: -103.4123,
        fecha: '2025-09'
      },
      {
        id: '3',
        Ciudad: 'Tlaq',
        Colonia: 'Centro',
        tipo_propiedad: 'Dep',
        operacion: 'Ren',
        precio: 18000,
        area_m2: 120,
        PxM2: 150,
        recamaras: 2,
        banos: 2,
        estacionamientos: 1,
        antiguedad: 10,
        latitud: 20.6423,
        longitud: -103.3098,
        fecha: '2025-08'
      }
    ],
    coloniaStats: [
      {
        colonia: 'Providencia',
        total: 245,
        precioPromedio: 7800000,
        precioMediana: 6500000,
        pxm2Promedio: 45000,
        pxm2Mediana: 43000,
        areaPromedio: 173,
        desviacionPrecio: 2100000,
        rangoPrecios: { min: 3500000, max: 15000000 },
        tendencia: 5.2
      },
      {
        colonia: 'Puerta de Hierro',
        total: 189,
        precioPromedio: 18500000,
        precioMediana: 15000000,
        pxm2Promedio: 52000,
        pxm2Mediana: 50000,
        areaPromedio: 356,
        desviacionPrecio: 8500000,
        rangoPrecios: { min: 8000000, max: 45000000 },
        tendencia: 8.7
      },
      {
        colonia: 'Country Club',
        total: 167,
        precioPromedio: 12300000,
        precioMediana: 10500000,
        pxm2Promedio: 48000,
        pxm2Mediana: 46000,
        areaPromedio: 256,
        desviacionPrecio: 4200000,
        rangoPrecios: { min: 5500000, max: 28000000 },
        tendencia: 6.3
      },
      {
        colonia: 'Chapalita',
        total: 312,
        precioPromedio: 4200000,
        precioMediana: 3800000,
        pxm2Promedio: 35000,
        pxm2Mediana: 34000,
        areaPromedio: 120,
        desviacionPrecio: 1200000,
        rangoPrecios: { min: 2200000, max: 8500000 },
        tendencia: 3.8
      },
      {
        colonia: 'Americana',
        total: 278,
        precioPromedio: 5600000,
        precioMediana: 4900000,
        pxm2Promedio: 42000,
        pxm2Mediana: 40000,
        areaPromedio: 133,
        desviacionPrecio: 1800000,
        rangoPrecios: { min: 2800000, max: 12000000 },
        tendencia: 4.5
      }
    ]
  };

  // Colores modernos para gráficas
  const COLORS = {
    primary: ['#8B5CF6', '#A78BFA', '#C4B5FD', '#DDD6FE', '#EDE9FE'],
    secondary: ['#06B6D4', '#22D3EE', '#67E8F9', '#A5F3FC', '#CFFAFE'],
    accent: ['#F59E0B', '#FBB040', '#FCD34D', '#FDE68A', '#FEF3C7'],
    danger: ['#EF4444', '#F87171', '#FCA5A5', '#FECACA', '#FEE2E2'],
    success: ['#10B981', '#34D399', '#6EE7B7', '#A7F3D0', '#D1FAE5'],
    gradient: {
      purple: 'linear-gradient(135deg, #667EEA 0%, #764BA2 100%)',
      blue: 'linear-gradient(135deg, #0EA5E9 0%, #6366F1 100%)',
      sunset: 'linear-gradient(135deg, #F59E0B 0%, #EF4444 100%)',
      ocean: 'linear-gradient(135deg, #06B6D4 0%, #3B82F6 100%)',
      forest: 'linear-gradient(135deg, #10B981 0%, #059669 100%)'
    }
  };

  // Componente de KPI Card
  const KPICard = ({ title, value, change, icon: Icon, gradient }) => (
    <div className="relative group">
      <div className="absolute -inset-0.5 bg-gradient-to-r from-purple-600 to-pink-600 rounded-2xl blur opacity-30 group-hover:opacity-50 transition duration-1000 group-hover:duration-200"></div>
      <div className="relative bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800 hover:border-purple-500/50 transition-all duration-300">
        <div className="flex items-center justify-between mb-4">
          <div className={`p-3 rounded-xl bg-gradient-to-br ${gradient}`}>
            <Icon className="w-6 h-6 text-white" />
          </div>
          <span className={`text-sm font-semibold px-3 py-1 rounded-full ${
            change >= 0 ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'
          }`}>
            {change >= 0 ? '+' : ''}{change}%
          </span>
        </div>
        <h3 className="text-gray-400 text-sm font-medium mb-1">{title}</h3>
        <p className="text-2xl font-bold text-white">{value}</p>
      </div>
    </div>
  );

  // Sección de Overview
  const OverviewSection = () => (
    <div className="space-y-8">
      {/* KPIs Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <KPICard 
          title="Propiedades Totales" 
          value="12,847" 
          change={12.5} 
          icon={Building2}
          gradient="from-purple-500 to-purple-700"
        />
        <KPICard 
          title="Precio Promedio" 
          value="$8.5M" 
          change={8.3} 
          icon={DollarSign}
          gradient="from-blue-500 to-blue-700"
        />
        <KPICard 
          title="Precio/m² Promedio" 
          value="$45,230" 
          change={5.7} 
          icon={TrendingUp}
          gradient="from-emerald-500 to-emerald-700"
        />
        <KPICard 
          title="Colonias Activas" 
          value="287" 
          change={3.2} 
          icon={MapPin}
          gradient="from-amber-500 to-amber-700"
        />
      </div>

      {/* Gráficas principales */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Distribución de Precios por Colonia */}
        <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
            <BarChart3 className="w-5 h-5 text-purple-400" />
            Distribución de Precios por Colonia
          </h3>
          <ResponsiveContainer width="100%" height={350}>
            <BarChart data={sampleData.coloniaStats}>
              <defs>
                <linearGradient id="colorPrice" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#8B5CF6" stopOpacity={0.9}/>
                  <stop offset="95%" stopColor="#8B5CF6" stopOpacity={0.3}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis dataKey="colonia" stroke="#9CA3AF" />
              <YAxis stroke="#9CA3AF" tickFormatter={(value) => `$${(value/1000000).toFixed(1)}M`} />
              <Tooltip 
                contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151', borderRadius: '8px' }}
                labelStyle={{ color: '#9CA3AF' }}
                formatter={(value) => `$${(value/1000000).toFixed(2)}M`}
              />
              <Bar dataKey="precioPromedio" fill="url(#colorPrice)" radius={[8, 8, 0, 0]} />
            </BarChart>
          </ResponsiveContainer>
        </div>

        {/* Scatter Plot Precio vs Área */}
        <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
          <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
            <Activity className="w-5 h-5 text-cyan-400" />
            Correlación Precio vs Área
          </h3>
          <ResponsiveContainer width="100%" height={350}>
            <ScatterChart>
              <defs>
                <linearGradient id="colorScatter" x1="0" y1="0" x2="1" y2="1">
                  <stop offset="0%" stopColor="#06B6D4" stopOpacity={0.8}/>
                  <stop offset="100%" stopColor="#8B5CF6" stopOpacity={0.8}/>
                </linearGradient>
              </defs>
              <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
              <XAxis 
                type="number" 
                dataKey="areaPromedio" 
                name="Área" 
                unit="m²" 
                stroke="#9CA3AF"
                domain={[0, 500]}
              />
              <YAxis 
                type="number" 
                dataKey="precioPromedio" 
                name="Precio" 
                stroke="#9CA3AF"
                tickFormatter={(value) => `$${(value/1000000).toFixed(0)}M`}
              />
              <Tooltip 
                cursor={{ strokeDasharray: '3 3' }}
                contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151', borderRadius: '8px' }}
                formatter={(value, name) => {
                  if (name === 'Precio') return `$${(value/1000000).toFixed(2)}M`;
                  return `${value} m²`;
                }}
              />
              <Scatter 
                name="Colonias" 
                data={sampleData.coloniaStats} 
                fill="url(#colorScatter)"
              >
                {sampleData.coloniaStats.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS.primary[index % COLORS.primary.length]} />
                ))}
              </Scatter>
            </ScatterChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Heatmap de Precio por m² */}
      <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
        <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
          <Layers className="w-5 h-5 text-emerald-400" />
          Análisis de Precio por Metro Cuadrado
        </h3>
        <ResponsiveContainer width="100%" height={400}>
          <ComposedChart data={sampleData.coloniaStats}>
            <defs>
              <linearGradient id="colorArea" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#10B981" stopOpacity={0.8}/>
                <stop offset="95%" stopColor="#10B981" stopOpacity={0.1}/>
              </linearGradient>
              <linearGradient id="colorLine" x1="0" y1="0" x2="1" y2="0">
                <stop offset="0%" stopColor="#F59E0B" stopOpacity={1}/>
                <stop offset="100%" stopColor="#EF4444" stopOpacity={1}/>
              </linearGradient>
            </defs>
            <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
            <XAxis dataKey="colonia" stroke="#9CA3AF" />
            <YAxis yAxisId="left" stroke="#9CA3AF" tickFormatter={(value) => `$${(value/1000).toFixed(0)}k`} />
            <YAxis yAxisId="right" orientation="right" stroke="#9CA3AF" />
            <Tooltip 
              contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151', borderRadius: '8px' }}
              labelStyle={{ color: '#9CA3AF' }}
            />
            <Legend />
            <Area
              yAxisId="left"
              type="monotone"
              dataKey="pxm2Promedio"
              stroke="#10B981"
              fill="url(#colorArea)"
              strokeWidth={2}
              name="Precio/m² Promedio"
            />
            <Bar 
              yAxisId="left"
              dataKey="pxm2Mediana" 
              fill="#8B5CF6"
              fillOpacity={0.6}
              radius={[4, 4, 0, 0]}
              name="Precio/m² Mediana"
            />
            <Line
              yAxisId="right"
              type="monotone"
              dataKey="tendencia"
              stroke="url(#colorLine)"
              strokeWidth={3}
              dot={{ fill: '#F59E0B', r: 6 }}
              activeDot={{ r: 8 }}
              name="Tendencia %"
            />
          </ComposedChart>
        </ResponsiveContainer>
      </div>

      {/* Distribución por Tipo de Propiedad */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Pie Chart */}
        <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
          <h3 className="text-lg font-bold text-white mb-4">Por Tipo de Propiedad</h3>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={[
                  { name: 'Departamento', value: 4538 },
                  { name: 'Casa', value: 3892 },
                  { name: 'Terreno', value: 2156 },
                  { name: 'Oficina', value: 1261 },
                  { name: 'Local', value: 1000 }
                ]}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={100}
                paddingAngle={2}
                dataKey="value"
              >
                {COLORS.primary.map((color, index) => (
                  <Cell key={`cell-${index}`} fill={color} />
                ))}
              </Pie>
              <Tooltip 
                contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151', borderRadius: '8px' }}
              />
            </PieChart>
          </ResponsiveContainer>
        </div>

        {/* Radar Chart */}
        <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
          <h3 className="text-lg font-bold text-white mb-4">Análisis Multivariable</h3>
          <ResponsiveContainer width="100%" height={300}>
            <RadarChart data={[
              { metric: 'Precio', A: 85, B: 65 },
              { metric: 'Área', A: 78, B: 82 },
              { metric: 'Amenidades', A: 92, B: 70 },
              { metric: 'Ubicación', A: 88, B: 85 },
              { metric: 'Demanda', A: 75, B: 90 },
              { metric: 'ROI', A: 82, B: 73 }
            ]}>
              <PolarGrid stroke="#374151" />
              <PolarAngleAxis dataKey="metric" stroke="#9CA3AF" />
              <PolarRadiusAxis angle={90} domain={[0, 100]} stroke="#374151" />
              <Radar name="Venta" dataKey="A" stroke="#8B5CF6" fill="#8B5CF6" fillOpacity={0.3} />
              <Radar name="Renta" dataKey="B" stroke="#06B6D4" fill="#06B6D4" fillOpacity={0.3} />
              <Legend />
            </RadarChart>
          </ResponsiveContainer>
        </div>

        {/* Treemap */}
        <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
          <h3 className="text-lg font-bold text-white mb-4">Distribución por Zona</h3>
          <ResponsiveContainer width="100%" height={300}>
            <Treemap
              data={[
                { name: 'Zona Poniente', size: 3847, fill: COLORS.primary[0] },
                { name: 'Zona Centro', size: 3189, fill: COLORS.secondary[0] },
                { name: 'Zona Sur', size: 2634, fill: COLORS.accent[0] },
                { name: 'Zona Norte', size: 2177, fill: COLORS.success[0] },
                { name: 'Zona Oriente', size: 1000, fill: COLORS.danger[0] }
              ]}
              dataKey="size"
              aspectRatio={4 / 3}
              stroke="#1F2937"
              strokeWidth={2}
            >
              <Tooltip 
                contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151', borderRadius: '8px' }}
              />
            </Treemap>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );

  // Sección de Análisis por Colonia
  const ColoniaAnalysisSection = () => (
    <div className="space-y-8">
      <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-white flex items-center gap-2">
            <MapPin className="w-5 h-5 text-purple-400" />
            Análisis Detallado por Colonia
          </h3>
          <div className="flex gap-3">
            <select className="bg-gray-800 text-white px-4 py-2 rounded-lg border border-gray-700 focus:border-purple-500 focus:outline-none">
              <option value="all">Todas las Colonias</option>
              <option value="providencia">Providencia</option>
              <option value="puerta-hierro">Puerta de Hierro</option>
              <option value="country">Country Club</option>
            </select>
            <button className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors flex items-center gap-2">
              <Download className="w-4 h-4" />
              Exportar
            </button>
          </div>
        </div>

        {/* Tabla de Colonias */}
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-gray-800">
                <th className="text-left py-3 px-4 text-gray-400 font-medium">Colonia</th>
                <th className="text-right py-3 px-4 text-gray-400 font-medium">Propiedades</th>
                <th className="text-right py-3 px-4 text-gray-400 font-medium">Precio Promedio</th>
                <th className="text-right py-3 px-4 text-gray-400 font-medium">Precio/m²</th>
                <th className="text-right py-3 px-4 text-gray-400 font-medium">Tendencia</th>
                <th className="text-center py-3 px-4 text-gray-400 font-medium">Distribución</th>
              </tr>
            </thead>
            <tbody>
              {sampleData.coloniaStats.map((colonia, index) => (
                <tr key={index} className="border-b border-gray-800/50 hover:bg-gray-800/30 transition-colors">
                  <td className="py-4 px-4">
                    <div className="flex items-center gap-3">
                      <div className={`w-3 h-3 rounded-full bg-gradient-to-r ${
                        index === 0 ? 'from-purple-500 to-purple-600' :
                        index === 1 ? 'from-blue-500 to-blue-600' :
                        index === 2 ? 'from-emerald-500 to-emerald-600' :
                        index === 3 ? 'from-amber-500 to-amber-600' :
                        'from-red-500 to-red-600'
                      }`} />
                      <span className="text-white font-medium">{colonia.colonia}</span>
                    </div>
                  </td>
                  <td className="text-right py-4 px-4 text-gray-300">{colonia.total}</td>
                  <td className="text-right py-4 px-4 text-gray-300">
                    ${(colonia.precioPromedio / 1000000).toFixed(1)}M
                  </td>
                  <td className="text-right py-4 px-4 text-gray-300">
                    ${(colonia.pxm2Promedio / 1000).toFixed(1)}k
                  </td>
                  <td className="text-right py-4 px-4">
                    <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${
                      colonia.tendencia > 5 ? 'bg-green-500/20 text-green-400' :
                      colonia.tendencia > 0 ? 'bg-yellow-500/20 text-yellow-400' :
                      'bg-red-500/20 text-red-400'
                    }`}>
                      <TrendingUp className="w-3 h-3" />
                      {colonia.tendencia}%
                    </span>
                  </td>
                  <td className="py-4 px-4">
                    <div className="w-full bg-gray-800 rounded-full h-2 overflow-hidden">
                      <div 
                        className="h-full bg-gradient-to-r from-purple-500 to-purple-600 rounded-full"
                        style={{ width: `${(colonia.total / 350) * 100}%` }}
                      />
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Box Plot de Precios por Colonia */}
      <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-6 border border-gray-800">
        <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-2">
          <BarChart3 className="w-5 h-5 text-cyan-400" />
          Distribución de Precios - Box Plot
        </h3>
        <ResponsiveContainer width="100%" height={400}>
          <ComposedChart data={sampleData.coloniaStats}>
            <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
            <XAxis dataKey="colonia" stroke="#9CA3AF" />
            <YAxis stroke="#9CA3AF" tickFormatter={(value) => `$${(value/1000000).toFixed(0)}M`} />
            <Tooltip 
              contentStyle={{ backgroundColor: '#1F2937', border: '1px solid #374151', borderRadius: '8px' }}
            />
            <Bar dataKey="rangoPrecios.min" stackId="a" fill="transparent" />
            <Bar dataKey="desviacionPrecio" stackId="a" fill="#8B5CF6" fillOpacity={0.3} />
            <Line 
              type="monotone" 
              dataKey="precioMediana" 
              stroke="#06B6D4" 
              strokeWidth={3}
              dot={{ fill: '#06B6D4', r: 6 }}
            />
            <Line 
              type="monotone" 
              dataKey="precioPromedio" 
              stroke="#F59E0B" 
              strokeWidth={2}
              strokeDasharray="5 5"
              dot={{ fill: '#F59E0B', r: 4 }}
            />
          </ComposedChart>
        </ResponsiveContainer>
      </div>
    </div>
  );

  // Panel de filtros lateral
  const FilterPanel = () => (
    <div className={`fixed right-0 top-20 h-[calc(100vh-5rem)] w-80 bg-gray-900/95 backdrop-blur-xl border-l border-gray-800 transform transition-transform duration-300 ${
      activeSection === 'filters' ? 'translate-x-0' : 'translate-x-full'
    } z-50 overflow-y-auto`}>
      <div className="p-6 space-y-6">
        <div className="flex items-center justify-between">
          <h3 className="text-xl font-bold text-white flex items-center gap-2">
            <Filter className="w-5 h-5" />
            Filtros Avanzados
          </h3>
          <button 
            onClick={() => setActiveSection('overview')}
            className="text-gray-400 hover:text-white transition-colors"
          >
            ×
          </button>
        </div>

        {/* Ciudad */}
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">Ciudad</label>
          <select 
            value={selectedCity}
            onChange={(e) => setSelectedCity(e.target.value)}
            className="w-full bg-gray-800 text-white px-4 py-2 rounded-lg border border-gray-700 focus:border-purple-500 focus:outline-none"
          >
            <option value="all">Todas</option>
            <option value="gdl">Guadalajara</option>
            <option value="zap">Zapopan</option>
            <option value="tlaq">Tlaquepaque</option>
            <option value="tonal">Tonalá</option>
          </select>
        </div>

        {/* Tipo de Propiedad */}
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">Tipo de Propiedad</label>
          <div className="grid grid-cols-2 gap-2">
            {['Casa', 'Departamento', 'Terreno', 'Oficina'].map((tipo) => (
              <button
                key={tipo}
                className={`px-3 py-2 rounded-lg border transition-all ${
                  selectedPropertyType === tipo.toLowerCase()
                    ? 'bg-purple-600 border-purple-600 text-white'
                    : 'bg-gray-800 border-gray-700 text-gray-300 hover:border-purple-500'
                }`}
                onClick={() => setSelectedPropertyType(tipo.toLowerCase())}
              >
                {tipo}
              </button>
            ))}
          </div>
        </div>

        {/* Operación */}
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">Operación</label>
          <div className="flex gap-2">
            <button
              className={`flex-1 px-4 py-2 rounded-lg border transition-all ${
                selectedOperation === 'venta'
                  ? 'bg-purple-600 border-purple-600 text-white'
                  : 'bg-gray-800 border-gray-700 text-gray-300 hover:border-purple-500'
              }`}
              onClick={() => setSelectedOperation('venta')}
            >
              Venta
            </button>
            <button
              className={`flex-1 px-4 py-2 rounded-lg border transition-all ${
                selectedOperation === 'renta'
                  ? 'bg-purple-600 border-purple-600 text-white'
                  : 'bg-gray-800 border-gray-700 text-gray-300 hover:border-purple-500'
              }`}
              onClick={() => setSelectedOperation('renta')}
            >
              Renta
            </button>
          </div>
        </div>

        {/* Rango de Precio */}
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">
            Rango de Precio: ${(priceRange[0] / 1000000).toFixed(1)}M - ${(priceRange[1] / 1000000).toFixed(1)}M
          </label>
          <div className="space-y-2">
            <input
              type="range"
              min="0"
              max="50000000"
              step="500000"
              value={priceRange[0]}
              onChange={(e) => setPriceRange([parseInt(e.target.value), priceRange[1]])}
              className="w-full"
            />
            <input
              type="range"
              min="0"
              max="50000000"
              step="500000"
              value={priceRange[1]}
              onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}
              className="w-full"
            />
          </div>
        </div>

        {/* Rango de Área */}
        <div>
          <label className="block text-sm font-medium text-gray-400 mb-2">
            Área: {areaRange[0]}m² - {areaRange[1]}m²
          </label>
          <div className="space-y-2">
            <input
              type="range"
              min="0"
              max="1000"
              step="10"
              value={areaRange[0]}
              onChange={(e) => setAreaRange([parseInt(e.target.value), areaRange[1]])}
              className="w-full"
            />
            <input
              type="range"
              min="0"
              max="1000"
              step="10"
              value={areaRange[1]}
              onChange={(e) => setAreaRange([areaRange[0], parseInt(e.target.value)])}
              className="w-full"
            />
          </div>
        </div>

        {/* Botones de acción */}
        <div className="space-y-3 pt-4">
          <button className="w-full px-4 py-3 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors font-medium">
            Aplicar Filtros
          </button>
          <button className="w-full px-4 py-3 bg-gray-800 hover:bg-gray-700 text-white rounded-lg transition-colors font-medium">
            Limpiar Filtros
          </button>
        </div>
      </div>
    </div>
  );

  // Navegación principal
  const MainNavigation = () => (
    <nav className="bg-gray-900/95 backdrop-blur-xl border-b border-gray-800 sticky top-0 z-40">
      <div className="px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-8">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-700 rounded-xl flex items-center justify-center">
                <Building2 className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">ESDATA Analytics</h1>
                <p className="text-xs text-gray-400">Real Estate Intelligence Platform</p>
              </div>
            </div>
          </div>

          <div className="flex items-center gap-6">
            <div className="flex bg-gray-800 rounded-lg p-1">
              {[
                { id: 'overview', label: 'Overview', icon: Home },
                { id: 'colonias', label: 'Colonias', icon: MapPin },
                { id: 'analytics', label: 'Analytics', icon: TrendingUp },
                { id: 'reports', label: 'Reports', icon: BarChart3 }
              ].map((item) => (
                <button
                  key={item.id}
                  onClick={() => setActiveSection(item.id)}
                  className={`px-4 py-2 rounded-md flex items-center gap-2 transition-all ${
                    activeSection === item.id
                      ? 'bg-purple-600 text-white'
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  <item.icon className="w-4 h-4" />
                  <span className="font-medium">{item.label}</span>
                </button>
              ))}
            </div>

            <button
              onClick={() => setActiveSection(activeSection === 'filters' ? 'overview' : 'filters')}
              className="p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors"
            >
              <Filter className="w-5 h-5" />
            </button>

            <button className="p-2 rounded-lg bg-gray-800 text-gray-400 hover:text-white transition-colors">
              <Settings className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </nav>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-purple-950">
      <MainNavigation />
      
      <div className="p-6">
        {activeSection === 'overview' && <OverviewSection />}
        {activeSection === 'colonias' && <ColoniaAnalysisSection />}
        {activeSection === 'analytics' && (
          <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-8 border border-gray-800">
            <h2 className="text-2xl font-bold text-white mb-4">Analytics Avanzado</h2>
            <p className="text-gray-400">Sección de análisis estadístico avanzado en desarrollo...</p>
          </div>
        )}
        {activeSection === 'reports' && (
          <div className="bg-gray-900/90 backdrop-blur-xl rounded-2xl p-8 border border-gray-800">
            <h2 className="text-2xl font-bold text-white mb-4">Generación de Reportes</h2>
            <p className="text-gray-400">Sistema de reportes personalizados en desarrollo...</p>
          </div>
        )}
      </div>

      <FilterPanel />
    </div>
  );
};

export default ESDATADashboard;